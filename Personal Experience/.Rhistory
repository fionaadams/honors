# }
x_full <- x %>% select(doc_id, sentence_id, sentence) %>% unique()
colnames(x_full) <- c("id", "sentence_id", "full_sentence")
full_new <- left_join(new, x_full, by=c("id", "sentence_id"))
full_new <- full_new %>% select(full_sentence, clusters, doc_id, sentence_id)
full_interviews_together <- full_new %>%
group_by(doc_id) %>%
summarise(text=paste(full_sentence, clusters, collapse=" "))
full_interviews_together <- full_new %>%
group_by(doc_id) %>%
summarise(text=paste(full_sentence, clusters, collapse=" "))
write.csv(full_interviews_together, "treatmentprof_mapped_interviews")
write.csv(full_interviews_together, "treatmentprof_mapped_interviews.csv")
write.csv(full_interviews_together, "personalexp_mapped_interviews.csv")
write.table(full_interviews_together$text[1], "test.txt")
View(new)
new <- new %>% mutate(clusters = ifelse(clusters == "", NA, paste0("<span style=\"color:red\">", clusters, "<\span>")))
new <- new %>% mutate(clusters = ifelse(clusters == "", NA, paste0("<span style=\"color:red\">", clusters, "</span>")))
View(new)
interviews_together <- new %>%
group_by(doc_id) %>%
summarise(text=paste(sentence, clusters, collapse=" "))
x_full <- x %>% select(doc_id, sentence_id, sentence) %>% unique()
colnames(x_full) <- c("id", "sentence_id", "full_sentence")
full_new <- left_join(new, x_full, by=c("id", "sentence_id"))
full_new <- full_new %>% select(full_sentence, clusters, doc_id, sentence_id)
full_interviews_together <- full_new %>%
group_by(doc_id) %>%
summarise(text=paste(full_sentence, clusters, collapse=" "))
View(full_interviews_together)
write.table(full_interviews_together$text[1], "test.rmd")
full_interviews_together$text[1]
str_replace(full_interviews_together$text[1], "AS: ", "\n AS:")
str_replace(full_interviews_together$text[1], "GA: ", "\n GA:")
write.table(full_interviews_together$text[1], "test.rmd")
?writeLines
full_interviews_together$text[1] <- str_replace(full_interviews_together$text[1], "AS: ", "\n AS:")
full_interviews_together$text[1] <- str_replace(full_interviews_together$text[1], "GA: ", "\n GA:")
writeLines(full_interviews_together$text[1], "test.rmd")
full_interviews_together$text[1] <- str_replace(full_interviews_together$text[1], "AS: ", "<br> AS:")
full_interviews_together$text[1] <- str_replace(full_interviews_together$text[1], "GA: ", "<br> GA:")
writeLines(full_interviews_together$text[1], "test.rmd")
full_interviews_together$text[1] <- str_replace_all(full_interviews_together$text[1], "AS: ", "<br> AS:")
full_interviews_together$text[1] <- str_replace_all(full_interviews_together$text[1], "GA: ", "<br> GA:")
writeLines(full_interviews_together$text[1], "test.rmd")
full_interviews_together$text[1] <- str_replace_all(full_interviews_together$text[1], "AS: ", "<br> AS: ")
full_interviews_together$text[1] <- str_replace_all(full_interviews_together$text[1], "GA: ", "<br> GA: ")
writeLines(full_interviews_together$text[1], "test.rmd")
full_interviews_together$text[1] <- str_replace_all(full_interviews_together$text[1], "AS:", "<br> AS: ")
full_interviews_together$text[1] <- str_replace_all(full_interviews_together$text[1], "GA:", "<br> GA: ")
writeLines(full_interviews_together$text[1], "test.rmd")
full_interviews_together$text[1] <- str_replace_all(full_interviews_together$text[1], "AS:", "<br> AS: ")
full_interviews_together$text[1] <- str_replace_all(full_interviews_together$text[1], "GA:", "<br> GA: ")
full_interviews_together$text[1] <- str_replace_all(full_interviews_together$text[1], "NA:", "<br> NA: ")
writeLines(full_interviews_together$text[1], "test.rmd")
View(new)
new <- new %>% mutate(ifelse(clusters == "", NA, paste0(" (", clusters, ")")))
new <- new %>% mutate(clusters = ifelse(clusters == "", "", paste0("<span style=\"color:red\">", clusters, "</span>")))
View(new)
library(udpipe)
library(readtext)
library(corpus)
library(dplyr)
library(stopwords)
library(stringr)
library(tidytext)
library(widyr)
require(text2vec)
library(LDAvis)
ud_model <- udpipe_download_model(language = "english")
udmodel_english <- udpipe_load_model(ud_model$file_model)
transcripts <- readtext("All_Transcripts/*.docx")
#get rid of .docx
for(i in 1:nrow(transcripts)){
transcripts[1][i,] <- str_remove(transcripts[1][i,], ".docx")
}
names <- read.csv("names_descriptions.csv")
colnames(names) <- c("doc_id", "description", "family_experience", "treatment_prof", "personal_experience")
transcripts_final <- left_join(transcripts_names, names, by="doc_id")
#get rid of .docx
for(i in 1:nrow(transcripts)){
transcripts[1][i,] <- str_remove(transcripts[1][i,], ".docx")
}
names <- read.csv("names_descriptions.csv")
colnames(names) <- c("doc_id", "description", "family_experience", "treatment_prof", "personal_experience")
transcripts_final <- left_join(transcripts, names, by="doc_id")
library(udpipe)
library(readtext)
library(corpus)
library(dplyr)
library(stopwords)
library(stringr)
library(tidytext)
library(widyr)
require(text2vec)
library(LDAvis)
ud_model <- udpipe_download_model(language = "english")
udmodel_english <- udpipe_load_model(ud_model$file_model)
transcripts <- readtext("All_Transcripts/*.docx")
#get rid of .docx
for(i in 1:nrow(transcripts)){
transcripts[1][i,] <- str_remove(transcripts[1][i,], ".docx")
}
names <- read.csv("names_descriptions.csv")
colnames(names) <- c("doc_id", "description", "family_experience", "treatment_prof", "personal_experience")
transcripts_final <- left_join(transcripts, names, by="doc_id")
transcripts_familyexp <- transcripts_final %>% filter(family_experience==TRUE)
transcripts_treatment <- transcripts_final %>% filter(treatment_prof==TRUE)
transcripts_personal <- transcripts_final %>% filter(personal_experience==TRUE)
#annotate model, getting words separated and sentence id where words are taken from
s <- udpipe_annotate(udmodel_english, transcripts_personal$text[1])
x <- data.frame(s)
'%nin%' <- Negate('%in%')
#take out stopwords (see stopwords() for exact words gone)
x_stopwords <- x %>%
mutate(stopword = ifelse(lemma %nin% stopwords(), "NOT.STOPWORD", "STOPWORD"))
#filter out words that aren't useful, ie. numerals, pronouns, etc.
x_filtered <- x_stopwords %>%
mutate(upos = as.character(upos)) %>%
filter(., grepl('ADJ|ADV|INTJ|NOUN|PROPN|VERB', upos)) %>% #explore: adv / intj inclusion
subset(., nchar(as.character(lemma)) >= 3) %>%
filter(., stopword != "STOPWORD")
# put words back in sentence form, but without the filtered out words
x_concatenated <- x_filtered %>%
select(doc_id, sentence_id, token, upos) %>%
group_by(sentence_id, doc_id) %>%
summarise(text=paste(token,collapse=" ")) %>%
filter(text != "Yeah") %>%
mutate(nchar=nchar(text))
colnames(x_concatenated) <- c("sentence_id", "doc_id", "sentences", "nchar")
# clean dataframe by concatenating words that appear together relatively often
# https://multithreaded.stitchfix.com/blog/2017/10/18/stop-using-word2vec/
#Get skipgram probabilities
tidy_skipgrams <- x_concatenated %>%
unnest_tokens(ngram, sentences, token = "ngrams", n=2) %>%  #sets sliding window of 2
mutate(skipgramID = row_number()) %>% #set row number as the ID
unnest_tokens(word, ngram)
#using counts and proportions, finds skipgram probabilities
skipgram_probs <- tidy_skipgrams %>%
pairwise_count(word, skipgramID, diag = TRUE, sort = TRUE) %>%
mutate(p = n / sum(n))
#find probability of each word occurring in this corpus
unigram_probs <- x_concatenated %>%
unnest_tokens(word, sentences) %>%
count(word, sort = TRUE) %>%
mutate(p = n / sum(n))
#normalize it: how often
normalized_prob <- skipgram_probs %>%
filter(n > 20) %>%
rename(word1 = item1, word2 = item2) %>%
left_join(unigram_probs %>%
select(word1 = word, p1 = p),
by = "word1") %>%
left_join(unigram_probs %>%
select(word2 = word, p2 = p),
by = "word2") %>%
mutate(p_together = p / p1 / p2) %>%
mutate(pattern = paste(word1, word2, sep=" "), concatenate=paste(word1, word2, sep="_"))
#Concatenate all words that fit the normalized probability threshold, if there are more than 10 together
if (nrow(normalized_prob)>=10){
for(i in 1:length(normalized_prob$pattern)) {
x_concatenated$sentences <- str_replace_all(x_concatenated$sentences, normalized_prob$pattern[i], normalized_prob$concatenate[i])
}
} else {
print ("No words to concatenate")
}
#add doc_id to transcripts
transcripts$id <- seq.int(nrow(transcripts))
transcripts_id <- transcripts %>% mutate(id = paste0("doc",id)) %>% select(-text)
#consistent colnames and data types
colnames(x_concatenated) <- c("sentence_id", "id", "sentence", "nchar")
#join them together
final_sentences <- left_join(x_concatenated, transcripts_id, by="id")
require(text2vec)
set.seed(397)
tokenlen = (length(new$sentence)/3) * 2
tokens = new$sentence[1:tokenlen] %>%
tolower %>%
word_tokenizer
it = itoken(tokens, ids = new$id[1:tokenlen], progressbar = FALSE)
v = create_vocabulary(it) %>%
prune_vocabulary(term_count_min = 10, doc_proportion_max = 0.2)
vectorizer = vocab_vectorizer(v)
dtm = create_dtm(it, vectorizer, type = "dgTMatrix")
lda_model = LDA$new(n_topics = 20, doc_topic_prior = 0.1, topic_word_prior = 0.01)
doc_topic_distr =
lda_model$fit_transform(x = dtm, n_iter = tokenlen,
convergence_tol = 0.001, n_check_convergence = 25,
progressbar = FALSE)
library(LDAvis)
lda_model$plot()
words_in_clusters <- lda_model$get_top_words(n = 30, lambda = 0.3)
words_in_clusters <- as.data.frame(words_in_clusters) %>%
mutate_all(as.character)
check.cluster.i <- function(df, i){
listofwords <- words_in_clusters[,i]
pattern <- paste(listofwords, collapse = "|")
detection <- str_detect(df, pattern, negate = FALSE) %>%
as.data.frame() %>%
mutate_all(as.character)
suppressWarnings(str_detect(detection, "TRUE"))
}
number_of_clusters <- 20
#wow.. this takes 20 minutes
for(i in 1:nrow(new)) {
for(j in 1:number_of_clusters){
new[[paste0("cluster_",j)]][[i]] <- check.cluster.i(new$sentence[[i]], j)
}
}
library(udpipe)
library(readtext)
library(corpus)
library(dplyr)
library(stopwords)
library(stringr)
library(tidytext)
library(widyr)
require(text2vec)
library(LDAvis)
ud_model <- udpipe_download_model(language = "english")
udmodel_english <- udpipe_load_model(ud_model$file_model)
transcripts <- readtext("All_Transcripts/*.docx")
#get rid of .docx
for(i in 1:nrow(transcripts)){
transcripts[1][i,] <- str_remove(transcripts[1][i,], ".docx")
}
names <- read.csv("names_descriptions.csv")
colnames(names) <- c("doc_id", "description", "family_experience", "treatment_prof", "personal_experience")
transcripts_final <- left_join(transcripts, names, by="doc_id")
transcripts_familyexp <- transcripts_final %>% filter(family_experience==TRUE)
transcripts_treatment <- transcripts_final %>% filter(treatment_prof==TRUE)
transcripts_personal <- transcripts_final %>% filter(personal_experience==TRUE)
#annotate model, getting words separated and sentence id where words are taken from
s <- udpipe_annotate(udmodel_english, transcripts_personal$text[1:2])
x <- data.frame(s)
'%nin%' <- Negate('%in%')
#take out stopwords (see stopwords() for exact words gone)
x_stopwords <- x %>%
mutate(stopword = ifelse(lemma %nin% stopwords(), "NOT.STOPWORD", "STOPWORD"))
#filter out words that aren't useful, ie. numerals, pronouns, etc.
x_filtered <- x_stopwords %>%
mutate(upos = as.character(upos)) %>%
filter(., grepl('ADJ|ADV|INTJ|NOUN|PROPN|VERB', upos)) %>% #explore: adv / intj inclusion
subset(., nchar(as.character(lemma)) >= 3) %>%
filter(., stopword != "STOPWORD")
# put words back in sentence form, but without the filtered out words
x_concatenated <- x_filtered %>%
select(doc_id, sentence_id, token, upos) %>%
group_by(sentence_id, doc_id) %>%
summarise(text=paste(token,collapse=" ")) %>%
filter(text != "Yeah") %>%
mutate(nchar=nchar(text))
colnames(x_concatenated) <- c("sentence_id", "doc_id", "sentences", "nchar")
# clean dataframe by concatenating words that appear together relatively often
# https://multithreaded.stitchfix.com/blog/2017/10/18/stop-using-word2vec/
#Get skipgram probabilities
tidy_skipgrams <- x_concatenated %>%
unnest_tokens(ngram, sentences, token = "ngrams", n=2) %>%  #sets sliding window of 2
mutate(skipgramID = row_number()) %>% #set row number as the ID
unnest_tokens(word, ngram)
#using counts and proportions, finds skipgram probabilities
skipgram_probs <- tidy_skipgrams %>%
pairwise_count(word, skipgramID, diag = TRUE, sort = TRUE) %>%
mutate(p = n / sum(n))
#find probability of each word occurring in this corpus
unigram_probs <- x_concatenated %>%
unnest_tokens(word, sentences) %>%
count(word, sort = TRUE) %>%
mutate(p = n / sum(n))
#normalize it: how often
normalized_prob <- skipgram_probs %>%
filter(n > 20) %>%
rename(word1 = item1, word2 = item2) %>%
left_join(unigram_probs %>%
select(word1 = word, p1 = p),
by = "word1") %>%
left_join(unigram_probs %>%
select(word2 = word, p2 = p),
by = "word2") %>%
mutate(p_together = p / p1 / p2) %>%
mutate(pattern = paste(word1, word2, sep=" "), concatenate=paste(word1, word2, sep="_")) %>%
filter(word1 != word2)
normalized_prob = normalized_prob[!duplicated(normalized_prob$pattern),]
#Concatenate all words that fit the normalized probability threshold, if there are more than 10 together
if (nrow(normalized_prob)>=10){
for(i in 1:length(normalized_prob$pattern)) {
x_concatenated$sentences <- str_replace_all(x_concatenated$sentences, normalized_prob$pattern[i], normalized_prob$concatenate[i])
}
} else {
print ("No words to concatenate")
}
#add doc_id to transcripts
transcripts$id <- seq.int(nrow(transcripts))
transcripts_id <- transcripts %>% mutate(id = paste0("doc",id)) %>% select(-text)
#consistent colnames and data types
colnames(x_concatenated) <- c("sentence_id", "id", "sentence", "nchar")
#join them together
new <- left_join(x_concatenated, transcripts_id, by="id")
require(text2vec)
set.seed(397)
tokenlen = (length(new$sentence)/3) * 2
tokens = new$sentence[1:tokenlen] %>%
tolower %>%
word_tokenizer
it = itoken(tokens, ids = new$id[1:tokenlen], progressbar = FALSE)
v = create_vocabulary(it) %>%
prune_vocabulary(term_count_min = 10, doc_proportion_max = 0.2)
vectorizer = vocab_vectorizer(v)
dtm = create_dtm(it, vectorizer, type = "dgTMatrix")
lda_model = LDA$new(n_topics = 20, doc_topic_prior = 0.1, topic_word_prior = 0.01)
doc_topic_distr =
lda_model$fit_transform(x = dtm, n_iter = tokenlen,
convergence_tol = 0.001, n_check_convergence = 25,
progressbar = FALSE)
library(LDAvis)
lda_model$plot()
words_in_clusters <- lda_model$get_top_words(n = 30, lambda = 0.3)
words_in_clusters <- as.data.frame(words_in_clusters) %>%
mutate_all(as.character)
write.csv(words_in_clusters, "personalexp_LDA_words.csv")
check.cluster.i <- function(df, i){
listofwords <- words_in_clusters[,i]
pattern <- paste(listofwords, collapse = "|")
detection <- str_detect(df, pattern, negate = FALSE) %>%
as.data.frame() %>%
mutate_all(as.character)
suppressWarnings(str_detect(detection, "TRUE"))
}
number_of_clusters <- 20
#wow.. this takes 20 minutes
for(i in 1:nrow(new)) {
for(j in 1:number_of_clusters){
new[[paste0("cluster_",j)]][[i]] <- check.cluster.i(new$sentence[[i]], j)
}
}
new[new=="FALSE"]<- NA
for(i in 1:number_of_clusters){
ifelse(colnames(new)[6:ncol(new)][[i]]==paste("cluster", i, sep="_"), new[6:ncol(new)][[i]] <- str_replace(new[6:ncol(new)][[i]], "TRUE", paste(i)), "breaks")
}
columns <- colnames(new)[10:ncol(new)]
#concatenate cluster values without NAs
new <- new %>% mutate(clusters = "")
new$clusters <- apply(new[, columns], 1, function(x) toString(na.omit(x)))
new <- new %>% mutate(ifelse(clusters == "", NA, paste0(" (", clusters, ")")))
#quick bug fix to deal with at a later date!! replacing (1,2,3,) with (1,2,3)
#this doesn't give an error, but does work? confusing life lol
#ASK LESLIE!
# for(i in 1:nrow(new)){
#   new$clusters[i] <- str_replace(new$clusters[i], ",\\)", "\\)")
# }
x_full <- x %>% select(doc_id, sentence_id, sentence) %>% unique()
colnames(x_full) <- c("id", "sentence_id", "full_sentence")
full_new <- left_join(new, x_full, by=c("id", "sentence_id"))
full_new <- full_new %>% select(full_sentence, clusters, doc_id, sentence_id)
full_interviews_together <- full_new %>%
group_by(doc_id) %>%
summarise(text=paste(full_sentence, clusters, collapse=" "))
full_interviews_together <- full_new %>%
group_by(doc_id) %>%
summarise(text=paste(full_sentence, clusters, collapse=" "))
full_interviews_together$text[1] <- str_replace_all(full_interviews_together$text[1], "AS:", "<br> AS: ")
full_interviews_together$text[1] <- str_replace_all(full_interviews_together$text[1], "GA:", "<br> GA: ")
writeLines(full_interviews_together$text[1], "test.rmd")
library(udpipe)
library(readtext)
library(corpus)
library(dplyr)
library(stopwords)
library(stringr)
library(tidytext)
library(widyr)
require(text2vec)
library(LDAvis)
ud_model <- udpipe_download_model(language = "english")
udmodel_english <- udpipe_load_model(ud_model$file_model)
transcripts <- readtext("All_Transcripts/*.docx")
#get rid of .docx
for(i in 1:nrow(transcripts)){
transcripts[1][i,] <- str_remove(transcripts[1][i,], ".docx")
}
names <- read.csv("names_descriptions.csv")
colnames(names) <- c("doc_id", "description", "family_experience", "treatment_prof", "personal_experience")
transcripts_final <- left_join(transcripts, names, by="doc_id")
transcripts_familyexp <- transcripts_final %>% filter(family_experience==TRUE)
transcripts_treatment <- transcripts_final %>% filter(treatment_prof==TRUE)
transcripts_personal <- transcripts_final %>% filter(personal_experience==TRUE)
#annotate model, getting words separated and sentence id where words are taken from
s <- udpipe_annotate(udmodel_english, transcripts_personal$text[1:2])
x <- data.frame(s)
'%nin%' <- Negate('%in%')
#take out stopwords (see stopwords() for exact words gone)
x_stopwords <- x %>%
mutate(stopword = ifelse(lemma %nin% stopwords(), "NOT.STOPWORD", "STOPWORD"))
#filter out words that aren't useful, ie. numerals, pronouns, etc.
x_filtered <- x_stopwords %>%
mutate(upos = as.character(upos)) %>%
filter(., grepl('ADJ|ADV|INTJ|NOUN|PROPN|VERB', upos)) %>% #explore: adv / intj inclusion
subset(., nchar(as.character(lemma)) >= 3) %>%
filter(., stopword != "STOPWORD")
# put words back in sentence form, but without the filtered out words
x_concatenated <- x_filtered %>%
select(doc_id, sentence_id, token, upos) %>%
group_by(sentence_id, doc_id) %>%
summarise(text=paste(token,collapse=" ")) %>%
filter(text != "Yeah") %>%
mutate(nchar=nchar(text))
colnames(x_concatenated) <- c("sentence_id", "doc_id", "sentences", "nchar")
# clean dataframe by concatenating words that appear together relatively often
# https://multithreaded.stitchfix.com/blog/2017/10/18/stop-using-word2vec/
#Get skipgram probabilities
tidy_skipgrams <- x_concatenated %>%
unnest_tokens(ngram, sentences, token = "ngrams", n=2) %>%  #sets sliding window of 2
mutate(skipgramID = row_number()) %>% #set row number as the ID
unnest_tokens(word, ngram)
#using counts and proportions, finds skipgram probabilities
skipgram_probs <- tidy_skipgrams %>%
pairwise_count(word, skipgramID, diag = TRUE, sort = TRUE) %>%
mutate(p = n / sum(n))
#find probability of each word occurring in this corpus
unigram_probs <- x_concatenated %>%
unnest_tokens(word, sentences) %>%
count(word, sort = TRUE) %>%
mutate(p = n / sum(n))
#normalize it: how often
normalized_prob <- skipgram_probs %>%
filter(n > 20) %>%
rename(word1 = item1, word2 = item2) %>%
left_join(unigram_probs %>%
select(word1 = word, p1 = p),
by = "word1") %>%
left_join(unigram_probs %>%
select(word2 = word, p2 = p),
by = "word2") %>%
mutate(p_together = p / p1 / p2) %>%
mutate(pattern = paste(word1, word2, sep=" "), concatenate=paste(word1, word2, sep="_")) %>%
filter(word1 != word2)
normalized_prob = normalized_prob[!duplicated(normalized_prob$pattern),]
#Concatenate all words that fit the normalized probability threshold, if there are more than 10 together
if (nrow(normalized_prob)>=10){
for(i in 1:length(normalized_prob$pattern)) {
x_concatenated$sentences <- str_replace_all(x_concatenated$sentences, normalized_prob$pattern[i], normalized_prob$concatenate[i])
}
} else {
print ("No words to concatenate")
}
#add doc_id to transcripts
transcripts$id <- seq.int(nrow(transcripts))
transcripts_id <- transcripts %>% mutate(id = paste0("doc",id)) %>% select(-text)
#consistent colnames and data types
colnames(x_concatenated) <- c("sentence_id", "id", "sentence", "nchar")
#join them together
new <- left_join(x_concatenated, transcripts_id, by="id")
require(text2vec)
set.seed(397)
tokenlen = (length(new$sentence)/3) * 2
tokens = new$sentence[1:tokenlen] %>%
tolower %>%
word_tokenizer
it = itoken(tokens, ids = new$id[1:tokenlen], progressbar = FALSE)
v = create_vocabulary(it) %>%
prune_vocabulary(term_count_min = 10, doc_proportion_max = 0.2)
vectorizer = vocab_vectorizer(v)
dtm = create_dtm(it, vectorizer, type = "dgTMatrix")
lda_model = LDA$new(n_topics = 20, doc_topic_prior = 0.1, topic_word_prior = 0.01)
doc_topic_distr =
lda_model$fit_transform(x = dtm, n_iter = tokenlen,
convergence_tol = 0.001, n_check_convergence = 25,
progressbar = FALSE)
library(LDAvis)
lda_model$plot()
words_in_clusters <- lda_model$get_top_words(n = 30, lambda = 0.3)
words_in_clusters <- as.data.frame(words_in_clusters) %>%
mutate_all(as.character)
write.csv(words_in_clusters, "personalexp_LDA_words.csv")
check.cluster.i <- function(df, i){
listofwords <- words_in_clusters[,i]
pattern <- paste(listofwords, collapse = "|")
detection <- str_detect(df, pattern, negate = FALSE) %>%
as.data.frame() %>%
mutate_all(as.character)
suppressWarnings(str_detect(detection, "TRUE"))
}
number_of_clusters <- 20
#wow.. this takes 20 minutes
for(i in 1:nrow(new)) {
for(j in 1:number_of_clusters){
new[[paste0("cluster_",j)]][[i]] <- check.cluster.i(new$sentence[[i]], j)
}
}
new[new=="FALSE"]<- NA
for(i in 1:number_of_clusters){
ifelse(colnames(new)[6:ncol(new)][[i]]==paste("cluster", i, sep="_"), new[6:ncol(new)][[i]] <- str_replace(new[6:ncol(new)][[i]], "TRUE", paste(i)), "breaks")
}
columns <- colnames(new)[10:ncol(new)]
#concatenate cluster values without NAs
new <- new %>% mutate(clusters = "")
new$clusters <- apply(new[, columns], 1, function(x) toString(na.omit(x)))
# new <- new %>% mutate(ifelse(clusters == "", "", paste0(" (", clusters, ")")))
new <- new %>% mutate(clusters = ifelse(clusters == "", "", paste0("<span style=\"color:red\">", clusters, "</span>")))
x_full <- x %>% select(doc_id, sentence_id, sentence) %>% unique()
colnames(x_full) <- c("id", "sentence_id", "full_sentence")
full_new <- left_join(new, x_full, by=c("id", "sentence_id"))
full_new <- full_new %>% select(full_sentence, clusters, doc_id, sentence_id)
full_interviews_together <- full_new %>%
group_by(doc_id) %>%
summarise(text=paste(full_sentence, clusters, collapse=" "))
full_interviews_together$text[1] <- str_replace_all(full_interviews_together$text[1], "AS:", "<br> AS: ")
full_interviews_together$text[1] <- str_replace_all(full_interviews_together$text[1], "GA:", "<br> GA: ")
writeLines(full_interviews_together$text[1], "test.rmd")
View(x_full)
stopwords()
table(x$upos)
